name: Web Application Server - DEV CI/CD

on:
    push:
        branches: ["main"]
    pull_request_target:
        types: [labeled, closed]

jobs:
# safe tag에 대한 gradlew test && merged에 대한 docker image build and push
  CI:
    if: contains(github.event.pull_request.labels.*.name, 'safe')
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3
        
    - name: Create .env
      shell: bash
      run: |
        cd backend
        touch .env
        echo SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
        cat .env

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
            
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip3 install -r requirements.txt
            
    - name: Run tests
      run: |
        cd backend
        python3 manage.py test

  
    ###  makemigration & migrate 이부분은 CI/CD가 진행되면 db가 날라가기에 db를 분리하는 게 좋아보임
    - name: migrate
      run: |
        cd backend
        python3 manage.py makemigrations
        python3 manage.py migrate

    ### Docker Image Build and Push ###
    - name: Login to Docker Hub
      if: github.event.pull_request.merged == true
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
            
    - name: Set up Docker Buildx
      if: github.event.pull_request.merged == true
      uses: docker/setup-buildx-action@v2
                
    - name: Build and push
      if: github.event.pull_request.merged == true
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
  
  # closed에 대한 server deploy
  CD:
    if: github.event.pull_request.merged == true
    needs: [CI]
    
    runs-on: ubuntu-20.04

    steps:
    ### SSH Connect and Docker Image Pull and Container Run
    - name: Docker Image Pull and Container Run
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          docker stop festival2023-was
          docker rm festival2023-was
          docker image rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
          docker run -d --net festival -p 8000:8000 --name festival2023-was ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
